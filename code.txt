/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cycle.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mm-furi <mm-furi@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/17 23:15:27 by michel            #+#    #+#             */
/*   Updated: 2025/06/23 13:14:39 by mm-furi          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "phylosopher.h"

static void	pick_forks(t_philo *ph)
{
	if (ph->args->nb_philo == 1)
		return ;
	else if (ph->id % 2 == 1)
	{
		pthread_mutex_lock(ph->left_fork);
		pthread_mutex_lock(ph->right_fork);
	}
	else
	{
		pthread_mutex_lock(ph->right_fork);
		pthread_mutex_lock(ph->left_fork);
	}
}

static void	drop_forks(t_philo *ph)
{
	if (ph->args->nb_philo == 1)
		pthread_mutex_unlock(ph->left_fork);
	else
	{
		pthread_mutex_unlock(ph->left_fork);
		pthread_mutex_unlock(ph->right_fork);
	}
}

void	eat_action(t_philo *ph)
{
	pick_forks(ph);
	safe_log(ph, "has taken a fork");
	if (ph->args->nb_philo > 1)
		safe_log(ph, "has taken a fork");
	pthread_mutex_lock(&ph->meal_mutex);
	ph->last_meal = get_timestamp();
	pthread_mutex_unlock(&ph->meal_mutex);
	safe_log(ph, "is eating");
	ft_sleep(ph->args->time_to_eat);
	pthread_mutex_lock(&ph->meal_mutex);
	ph->eats++;
	pthread_mutex_unlock(&ph->meal_mutex);
	drop_forks(ph);
	if (ph->args->nb_philo == 1)
	{
		ft_sleep(ph->args->time_to_die);
		safe_log(ph, "died");
		ph->stop = 1;
	}
}

void	sleep_action(t_philo *ph)
{
	safe_log(ph, "is sleeping");
	ft_sleep(ph->args->time_to_sleep);
}

void	think_action(t_philo *ph)
{
	safe_log(ph, "is thinking");
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mm-furi <mm-furi@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/17 16:17:00 by michel            #+#    #+#             */
/*   Updated: 2025/06/23 12:05:23 by mm-furi          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "phylosopher.h"

static void	init_philos(t_data *data)
{
	int		i;
	t_philo	*ph;

	i = 0;
	while (i < data->args.nb_philo)
	{
		ph = &data->philos[i];
		ph->id = i + 1;
		ph->args = &data->args;
		ph->stop = data->stop;
		ph->left_fork = &data->forks[i];
		ph->right_fork = &data->forks[(i + 1) % data->args.nb_philo];
		ph->print_mutex = &data->print_mutex;
		ph->last_meal = get_timestamp();
		ph->start_time = data->start_time;
		ph->eats = 0;
		pthread_mutex_init(&ph->meal_mutex, NULL);
		i++;
	}
}

static int	parse_args(t_data *data, int argc, char **argv)
{
	if (argc < 5 || argc > 6)
	{
		fprintf(
			stderr,
			"Usage: %s nb_philo time_to_die time_to_eat "
			"time_to_sleep [meals_required]",
			argv[0]);
		return (1);
	}
	data->args.nb_philo = ft_atoi(argv[1]);
	data->args.time_to_die = ft_atoi(argv[2]);
	data->args.time_to_eat = ft_atoi(argv[3]);
	data->args.time_to_sleep = ft_atoi(argv[4]);
	data->start_time = get_timestamp();
	data->stop = 0;
	if (argc == 6)
		data->args.meals_required = ft_atoi(argv[5]);
	else
		data->args.meals_required = -1;
	return (0);
}

static int	setup_resources(t_data *data)
{
	int	n;
	int	i;

	n = data->args.nb_philo;
	data->forks = malloc(sizeof(pthread_mutex_t) * n);
	data->threads = malloc(sizeof(pthread_t) * n);
	data->philos = malloc(sizeof(t_philo) * n);
	if (!data->forks || !data->threads || !data->philos)
		return (1);
	i = 0;
	while (i < data->args.nb_philo)
		pthread_mutex_init(&data->forks[i++], NULL);
	pthread_mutex_init(&data->print_mutex, NULL);
	return (0);
}

int	init_data(t_data *data, int argc, char **argv)
{
	if (parse_args(data, argc, argv))
		return (1);
	data->start_time = get_timestamp();
	data->stop = 0;
	if (setup_resources(data))
		return (1);
	init_philos(data);
	return (0);
}

void	cleanup_data(t_data *data)
{
	int	i;

	i = 0;
	while (i < data->args.nb_philo)
		pthread_mutex_destroy(&data->forks[i++]);
	i = 0;
	while (i < data->args.nb_philo)
		pthread_mutex_destroy(&data->philos[i++].meal_mutex);
	pthread_mutex_destroy(&data->print_mutex);
	free(data->forks);
	free(data->threads);
	free(data->philos);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mm-furi <mm-furi@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/07 17:41:07 by michel            #+#    #+#             */
/*   Updated: 2025/06/04 15:28:22 by mm-furi          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "phylosopher.h"

int	main(int argc, char **argv)
{
	t_data	data;
	int		i;

	if (init_data(&data, argc, argv))
		return (1);
	i = 0;
	while (i < data.args.nb_philo)
	{
		pthread_create(&data.threads[i], NULL, philo_routine, &data.philos[i]);
		i++;
	}
	pthread_create(&data.monitor, NULL, monitor_routine, &data);
	i = 0;
	while (i < data.args.nb_philo)
	{
		pthread_join(data.threads[i], NULL);
		i++;
	}
	pthread_join(data.monitor, NULL);
	cleanup_data(&data);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   routine.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mm-furi <mm-furi@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/07 17:12:31 by michel            #+#    #+#             */
/*   Updated: 2025/06/23 14:31:46 by mm-furi          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "phylosopher.h"

void	*philo_routine(void *arg)
{
	t_philo	*ph;

	ph = (t_philo *)arg;
	while (!ph->stop)
	{
		eat_action(ph);
		if (ph->stop || (ph->args->meals_required > 0
				&& ph->eats >= ph->args->meals_required))
			break ;
		sleep_action(ph);
		think_action(ph);
	}
	return (NULL);
}

int	check_death(t_data *data, int i)
{
	long	now;

	pthread_mutex_lock(&data->philos[i].meal_mutex);
	now = get_timestamp();
	if (now - data->philos[i].last_meal > data->args.time_to_die)
		return (1);
	pthread_mutex_unlock(&data->philos[i].meal_mutex);
	return (0);
}

int	check_finished(t_data *data, int i, int *finished)
{
	pthread_mutex_lock(&data->philos[i].meal_mutex);
	if (data->args.meals_required > 0
		&& data->philos[i].eats >= data->args.meals_required)
		(*finished)++;
	pthread_mutex_unlock(&data->philos[i].meal_mutex);
	return (0);
}

static int	monitor_cycle(t_data *data)
{
	int		done;
	int		i;
	t_philo	*ph;

	done = 0;
	i = 0;
	while (i < data->args.nb_philo)
	{
		ph = &data->philos[i];
		pthread_mutex_lock(&ph->meal_mutex);
		if (get_timestamp() - ph->last_meal > data->args.time_to_die)
		{
			safe_log(ph, "died");
			data->stop = 1;
			pthread_mutex_unlock(&ph->meal_mutex);
			return (1);
		}
		if (data->stop)
			return (0);
		pthread_mutex_unlock(&ph->meal_mutex);
		check_finished(data, i, &done);
		i++;
	}
	if (data->args.meals_required > 0 && done == data->args.nb_philo)
		data->stop = 1;
	return (data->stop);
}

void	*monitor_routine(void *arg)
{
	t_data	*data;

	data = arg;
	while (!data->stop && !monitor_cycle(data))
		usleep(1000);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mm-furi <mm-furi@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/17 15:51:17 by michel            #+#    #+#             */
/*   Updated: 2025/06/23 10:44:11 by mm-furi          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "phylosopher.h"

long	get_timestamp(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return (tv.tv_sec * 1000L + tv.tv_usec / 1000L);
}

void	ft_sleep(long ms)
{
	usleep(ms * 1000);
}

void	safe_log(t_philo *ph, const char *msg)
{
	long long	now;

	pthread_mutex_lock(ph->print_mutex);
	now = get_timestamp() - ph->start_time;
	printf("%lld %d %s\n", now, ph->id, msg);
	pthread_mutex_unlock(ph->print_mutex);
}

int	ft_strlen(char *s)
{
	int	i;

	if (!s)
		return (0);
	i = 0;
	while (s[i])
		i++;
	return (i);
}

int	ft_atoi(const char *s)
{
	int		i;
	long	ret;
	int		sign;

	i = 0;
	ret = 0;
	sign = 1;
	while (s[i] == ' ' || (s[i] >= 9 && s[i] <= 13))
		i++;
	if (s[i] == '-' || s[i] == '+')
	{
		if (s[i] == '-')
			sign = -1;
		i++;
	}
	while (s[i] >= '0' && s[i] <= '9')
	{
		ret = ret * 10 + (s[i] - '0');
		i++;
	}
	return ((int)ret * sign);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   phylosopher.h                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mm-furi <mm-furi@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/23 10:43:22 by mm-furi           #+#    #+#             */
/*   Updated: 2025/06/23 10:43:22 by mm-furi          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PHYLOSOPHER_H
# define PHYLOSOPHER_H

# include <pthread.h>
# include <stdio.h>
# include <stdlib.h>
# include <sys/time.h>
# include <unistd.h>

typedef struct s_args
{
	int				nb_philo;
	long			time_to_die;
	long			time_to_eat;
	long			time_to_sleep;
	int				meals_required;
}					t_args;

typedef struct s_philo
{
	int				id;
	long			last_meal;
	int				eats;
	int				stop;
	pthread_mutex_t	meal_mutex;
	pthread_mutex_t	*left_fork;
	pthread_mutex_t	*right_fork;
	pthread_mutex_t	*print_mutex;
	t_args			*args;
	long			start_time;
}					t_philo;

typedef struct s_data
{
	t_args			args;
	pthread_mutex_t	*forks;
	pthread_mutex_t	print_mutex;
	pthread_t		*threads;
	pthread_t		monitor;
	t_philo			*philos;
	int				stop;
	long			start_time;
}					t_data;

long				get_timestamp(void);
void				ft_sleep(long ms);
void				safe_log(t_philo *ph, const char *msg);
int					init_data(t_data *data, int argc, char **argv);
void				cleanup_data(t_data *data);
void				*philo_routine(void *arg);
void				*monitor_routine(void *arg);
void				eat_action(t_philo *ph);
void				sleep_action(t_philo *ph);
void				think_action(t_philo *ph);
int					ft_atoi(const char *s);
#endif
