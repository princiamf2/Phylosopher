/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cycle.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: michel <michel@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/17 23:15:27 by michel            #+#    #+#             */
/*   Updated: 2025/05/07 17:09:36 by michel           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "phylosopher.h"

static void	pick_forks(t_philo *ph)
{
	if (ph->id == ph->args->nb_philo)
	{
		pthread_mutex_lock(ph->right_fork);
		pthread_mutex_lock(ph->left_fork);
	}
	else
	{
		pthread_mutex_lock(ph->left_fork);
		pthread_mutex_lock(ph->right_fork);
	}
}

static void	drop_forks(t_philo *ph)
{
	pthread_mutex_unlock(ph->left_fork);
	pthread_mutex_unlock(ph->right_fork);
}

void	eat_action(t_philo *ph)
{
	pick_forks(ph);
	safe_log(ph, "has taken a fork");
	safe_log(ph, "has taken a fork");
	pthread_mutex_lock(&ph->meal_mutex);
	ph->last_meal = get_timestamp();
	pthread_mutex_unlock(&ph->meal_mutex);
	safe_log(ph, "is eating");
	ft_sleep(ph->args->time_to_eat);
	pthread_mutex_lock(&ph->meal_mutex);
	ph->eats++;
	pthread_mutex_unlock(&ph->meal_mutex);
	drop_forks(ph);
}

void	sleep_action(t_philo *ph)
{
	safe_log(ph, "is sleeping");
	ft_sleep(ph->args->time_to_sleep);
}

void	think_action(t_philo *ph)
{
	safe_log(ph, "is thinking");
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: michel <michel@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/17 16:17:00 by michel            #+#    #+#             */
/*   Updated: 2025/05/07 17:07:22 by michel           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "phylosopher.h"

int	init_data(t_data *data, int argc, char **argv)
{
	int i;

	if (argc < 5 || argc > 6)
	{
		fprintf(stderr, "Usage: %s nb_philo time_to_die "
			"time_to_eat time_to_sleep [meals_required]\n", argv[0]);
		return (1);
	}
	data->args.nb_philo = atoi(argv[1]);
	data->args.time_to_die = atol(argv[2]);
	data->args.time_to_eat = atol(argv[3]);
	data->args.time_to_sleep = atol(argv[4]);
	data->args.meals_required = (argc == 6) ? atoi(argv[5]) : -1;
	data->stop = 0;
	i = 0;
	data->forks = malloc(sizeof(pthread_mutex_t) * data->args.nb_philo);
	data->threads = malloc(sizeof(pthread_t) * data->args.nb_philo);
	data->philos = malloc(sizeof(t_philo) * data->args.nb_philo);
	if (!data->forks || !data->threads || !data->philos)
		return (1);
	while (i < data->args.nb_philo)
		pthread_mutex_init(&data->forks[i++], NULL);
	pthread_mutex_init(&data->print_mutex, NULL);
	return (0);
}

void	cleanup_data(t_data *data)
{
	int i;

	i = 0;
	while (i < data->args.nb_philo)
		pthread_mutex_destroy(&data->forks[i++]);
	i = 0;
	while (i < data->args.nb_philo)
		pthread_mutex_destroy(&data->philos[i++].meal_mutex);
	pthread_mutex_destroy(&data->print_mutex);
	free(data->forks);
	free(data->threads);
	free(data->philos);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: michel <michel@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/07 17:41:07 by michel            #+#    #+#             */
/*   Updated: 2025/05/07 18:04:13 by michel           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "phylosopher.h"

static void	init_philos(t_data *data)
{
	int			i;
	t_philo		*ph;

	i = 0;
	while (i < data->args.nb_philo)
	{
		ph = &data->philos[i];
		ph->id          = i + 1;
		ph->args        = &data->args;
		ph->stop        = &data->stop;
		ph->left_fork   = &data->forks[i];
		ph->right_fork  = &data->forks[(i + 1) % data->args.nb_philo];
		ph->print_mutex = &data->print_mutex;
		ph->last_meal   = get_timestamp();
		ph->eats        = 0;
		pthread_mutex_init(&ph->meal_mutex, NULL);
		i++;
	}
}

int	main(int argc, char **argv)
{
	t_data	data;
	int		i;

	if (init_data(&data, argc, argv))
		return (1);
    i = 0;
    while (i < data.args.nb_philo)
    {
        pthread_create(&data.threads[i], NULL,
                       philo_routine, &data.philos[i]);
        i++;
    }
    
    pthread_create(&data.monitor, NULL,
                   monitor_routine, &data);
    
    i = 0;
    while (i < data.args.nb_philo)
    {
        pthread_join(data.threads[i], NULL);
        i++;
    }
    pthread_join(data.monitor, NULL);
    init_philos(data);
	cleanup_data(&data);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   routine.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: michel <michel@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/07 17:12:31 by michel            #+#    #+#             */
/*   Updated: 2025/05/07 17:39:31 by michel           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "phylosopher.h"

void	*philo_routine(void *arg)
{
	t_philo *ph;

	ph = (t_philo *)arg;
	if (ph->id % 2 == 0)
		ft_sleep(ph->args->time_to_eat / 10);
	while (!*(ph->stop))
	{
		eat_action(ph);
		if (ph->args->meals_required > 0 && ph->eats >= ph->args->meals_required)
			break;
		sleep_action(ph);
		think_action(ph);
	}
	return (NULL);
}

int	check_death(t_data *data, int i)
{
	pthread_mutex_lock(&data->philos[i].meal_mutex);
	if (get_timestamp() - data->philos[i].last_meal > data->args.time_to_die)
	{
		safe_log(&data->philos[i], "died");
		data->stop = 1;
		pthread_mutex_unlock(&data->philos[i].meal_mutex);
		return (1);
	}
	pthread_mutex_unlock(&data->philos[i].meal_mutex);
	return (0);
}

int	check_finished(t_data *data, int i, int *finished)
{
	pthread_mutex_lock(&data->philos[i].meal_mutex);
	if (data->args.meals_required > 0 \
	&& data->philos[i].eats >= data->args.meals_required)
		(*finished)++;
	pthread_mutex_unlock(&data->philos[i].meal_mutex);
	return (0);
}

void	*monitor_routine(void *arg)
{
	t_data *data;
	int	 finished;
	int	 i;

	data = (t_data *)arg;
	while (!data->stop)
	{
		finished = 0;
		i = 0;
		while (i < data->args.nb_philo)
		{
			if (check_death(data, i))
				return (NULL);
			check_finished(data, i, &finished);
			i++;
		}
		if (data->args.meals_required > 0 && finished == data->args.nb_philo)
		{
			data->stop = 1;
			return (NULL);
		}
		usleep(1000);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: michel <michel@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/17 15:51:17 by michel            #+#    #+#             */
/*   Updated: 2025/05/07 17:02:51 by michel           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "phylosopher.h"

long    get_timestamp(void)
{
    struct  timeval tv;
    gettimeofday(&tv, NULL);
    return (tv.tv_sec * 1000L + tv.tv_usec / 1000L);
}

void    ft_sleep(long ms)
{
    usleep(ms * 1000);
}

void    safe_log(t_philo *ph, const char *msg)
{
    pthread_mutex_lock(ph->print_mutex);
    printf("%ld %d %s\n", get_timestamp(), ph->id, msg);
    pthread_mutex_unlock(ph->print_mutex);
}#ifndef PHYLOSOPHER_H
#define PHYLOSOPHER_H

# include <pthread.h>
# include <stdio.h>
# include <stdlib.h>
# include <unistd.h>
# include <sys/time.h>

typedef struct s_args
{
    int     nb_philo;
    long    time_to_die;
    long    time_to_eat;
    long    time_to_sleep;
    int     meals_required;
}   t_args;

typedef struct s_philo
{
    int             id;
    long            last_meal;
    int             eats;
    int             *stop;
    pthread_mutex_t meal_mutex;
    pthread_mutex_t *left_fork;
    pthread_mutex_t *right_fork;
    pthread_mutex_t *print_mutex;
    t_args          *args;
} t_philo;

typedef struct s_data
{
    t_args  args;
    pthread_mutex_t *forks;
    pthread_mutex_t print_mutex;
    pthread_t       *threads;
    pthread_t       monitor;
    t_philo         *philos;
    int             stop;
} t_data;

long	get_timestamp(void);
void	ft_sleep(long ms);
void	safe_log(t_philo *ph, const char *msg);
int		init_data(t_data *data, int argc, char **argv);
void	cleanup_data(t_data *data);
void	*philo_routine(void *arg);
void	*monitor_routine(void *arg);
void	eat_action(t_philo *ph);
void	sleep_action(t_philo *ph);
void	think_action(t_philo *ph);

#endif
